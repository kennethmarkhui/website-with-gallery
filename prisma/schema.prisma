datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model Item {
  id                String      @id 
  categoryId        String?
  category          Category?   @relation(fields: [categoryId],references: [id],onDelete: SetNull )
  image             Image?
  dateAdded         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  translations      ItemTranslations[]
}


model Image {
  id            String     @id @default(cuid())
  url           String
  publicId      String
  width         Int
  height        Int
  item          Item       @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId        String     @unique
  dateAdded     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Category {
  id            String      @id @default(cuid())
  dateAdded     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  items         Item[]
  translations  CategoryTranslations[]
}

model Language {
  id        String  @id @default(cuid())
  name      String  
  code      String  @unique
  category  CategoryTranslations[]
  item      ItemTranslations[]
}

model ItemTranslations{
  languageId        String      
  language          Language    @relation(fields: [languageId], references: [id], onDelete: Cascade)
  itemId            String
  item              Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  name              String?
  storage           String?
  dateAdded         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  

  @@id([languageId, itemId])
}

model CategoryTranslations{
  languageId        String      
  language          Language    @relation(fields: [languageId],references: [id], onDelete: Cascade)
  categoryId        String      
  category          Category    @relation(fields: [categoryId],references: [id], onDelete: Cascade)
  name              String      
  dateAdded         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  @@id([languageId, categoryId])
  @@unique([languageId, name])
}